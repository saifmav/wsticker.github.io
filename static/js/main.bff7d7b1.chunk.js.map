{"version":3,"sources":["Component/WsTicker.js","App.js","reportWebVitals.js","index.js"],"names":["WsTicker","props","useState","datalist","setDatalist","connection","setConnection","Bid","useRef","DailyChange","LastPrice","Vol","numCommas","x","toString","pattern","test","replace","useEffect","ws","WebSocket","msg","JSON","stringify","event","channel","symbol","onopen","send","onclose","onmessage","message","val","parse","data","error","console","log","Array","isArray","current","className","Container","Card","style","width","Row","Col","src","alt","Body","Text","toFixed","Button","onClick","variant","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bff7d7b1.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react'\nimport { Container, Card, Row ,Col, Button } from 'react-bootstrap'\nimport '../App.css'\n\nconst WsTicker = (props) => {\n    const [datalist ,setDatalist] = useState([])\n    const [connection, setConnection] = useState(true)\n\n    const Bid = useRef(0)\n    const DailyChange = useRef(0)\n    const LastPrice = useRef(0)\n    const Vol = useRef(0)\n  \n    const numCommas = (x) => {\n      x = x.toString();\n      var pattern = /(-?\\d+)(\\d{3})/;\n      while (pattern.test(x))\n      x = x.replace(pattern, \"$1,$2\");\n      return x;\n    }\n    \n    const startConnection = () => setConnection(true)\n    const stopConnection = () => setConnection(false)\n\n    \n    useEffect(() => {\n        const ws = new WebSocket('wss://api-pub.bitfinex.com/ws/2')\n        \n        let msg = JSON.stringify({ \n            event: 'subscribe', \n            channel: 'ticker', \n            symbol: 'tBTCUSD' \n        })\n        if(connection){\n            ws.onopen = () => ws.send(msg)  \n        }  \n\n        if(!connection){\n            ws.onclose = () => ws.send(msg)\n        }\n        \n        ws.onmessage = (message)=>{\n            let val \n            try {\n                val = JSON.parse(message.data)\n                setDatalist(val)\n            }\n            catch(error){\n                console.log(error)\n            }\n        } \n        \n    }, [connection])\n    \n    \n    if(Array.isArray(datalist) && Array.isArray(datalist[1] && datalist[1])){\n        if(datalist[1][0]){\n            Bid.current = datalist[1][0]\n        }\n        if(datalist[1][5]){\n            DailyChange.current = datalist[1][5]\n        }\n        if(datalist[1][6]){\n            LastPrice.current = datalist[1][6]\n        }\n        if(datalist[1][7]){\n            Vol.current = datalist[1][7]\n        }\n\n    }\n     \n\n  return (\n    <div className='py-4'>\n      <h2>Ticker</h2>\n      <Container>\n            <Card style={{ width: '38rem' }} className='card-color'>\n              <Row className='text-color'>\n                <Col className='img-tag'>\n                  <img\n                    src='https://static.bitfinex.com/images/icons/BTC-alt.svg'\n                    alt='btc'\n                  />\n                </Col>\n                <Col>\n                  <Card.Body>\n                    <Card.Text>BTC/USD</Card.Text>\n                    <Card.Text>VOL </Card.Text>\n                    <Card.Text>DAILY CHANGE </Card.Text>\n                    <Card.Text>LAST PRICE </Card.Text>\n                  </Card.Body>\n                </Col>\n                <Col>\n                  <Card.Body>\n                    <Card.Text>{Bid.current}</Card.Text>\n                    <Card.Text>{numCommas(Vol.current.toFixed(2))} USD</Card.Text>\n                    <Card.Text className ={DailyChange.current < 0 ? 'red' : 'green' }>{DailyChange.current} %</Card.Text>\n                    <Card.Text>{numCommas(LastPrice.current.toFixed(1))}</Card.Text>\n                  </Card.Body>\n                </Col>\n             </Row>\n            </Card>\n            <div className='btns'>\n            <Button onClick={startConnection}  variant=\"success\">Connect</Button>\n            <Button onClick={stopConnection}  variant=\"danger\">Disconnect</Button>\n            </div>\n      </Container>\n    </div>\n  );\n}\n\n\nexport default WsTicker\n","import './App.css';\nimport WsTicker from './Component/WsTicker';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WsTicker/>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}